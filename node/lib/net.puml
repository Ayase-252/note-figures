@startuml events
!include events.puml
!include cluster.puml
!include node_binding/tcp_wrap.puml
!include node_binding/stream_wrap.puml

namespace lib {
  namespace net<<PublicModule>> {
    class Server extends lib.events.EventEmitter {
      -_connections: number
      -[async_id_symbol]: number
      -_handle: null | TCP | Pipe
      -_usingWorkers: boolean = false
      -_unref: boolean = false
      -_pipeName: string
      -_worker: Any[]
      +allowHalfOpen: boolean = false
      +pausedOnConnect: boolean
      +listening: ReadOnly<boolean>

      +constructor(options, connectionListener)
      +constructor(connectionListener)
      +listen(handle [,blacklog][,callback]): this
      +listen(options[, callback]): this
      +listen(path[, backlog][, callback]): this
      +listen([port[, host[, backlog]]][, callback]): this
      -listen2(address, port, addressType, backlog, fd, flags)
      +address(): Object
      +getConnections(cb): this
      +close(cb): this
      -_emitCloseIfDrained()
      -_setupWorker(socketList)
      +ref(): this
      +unref(): this
    }

    Server *-> lib.tcp_wrap.TCP
    Server ..> lib.cluster.Cluster

    class Socket extends lib.stream.Duplex {
      +connecting: boolean = false
      -[async_id_symbol]: number
      -_hadError: boolean
      -[kHandler]
      -_handler: Pipe | TCP
      -_parent
      -_host
      -[kSetNoDelay]
      -[kLastWriteQueueSize]
      -[kTimeout]
      -[kBuffer]
      -[kBufferCb]
      -[kBufferGen]
      -_pendingData
      -_pendingEnconding
      readableFlowing: boolean
      server
      _server
      -[kBytesRead]: number
      -[kBytesWritten]: number
      pending: boolean


      +constructor(options)
      -_unrefTimer()
      -_final(cb)
    }

    Socket *-> lib.tcp_wrap.TCP
    Socket *-> lib.pipe_wrap.Pipe
    Socket ..> lib.stream_wrap.ShutdownWrap
  }
}
@enduml
