@startuml stream

!include events.puml

namespace lib {
  namespace stream<<Public Module>> {
    class Stream extends lib.events.EventEmitter {
        pipe(dest: Writable, options): Writable
    }

    class ReadableState {
      objectMode: boolean
      highWaterMark: number
      buffer: BufferList
      length: 0
      pipes: Array
      flowing: null
      ended: boolean
      endEmitted: boolean
      reading: boolean
      constructed: boolean
      sync: boolean
      needReadable: boolean
      emittedReadable: boolean
      readableListening: boolean
      resumeScheduled: boolean
      [kPaused]: null

      errorEmitted: boolean

      emitClose: boolean
      autoDestroy: boolean
      destoryed: boolean

      errored: Error
      closed: boolean
      closedEmitted: boolean

      defaultEncoding: string
      awaitDriainWriter: null
      miltiAwaitDrain: boolean

      readingMore: boolean
      decoder: Decoder
      encoding: string
    }

    note left of ReadableState::errored
      Cached Error Object on runtime
    endnote


    class Readable extends Stream {
      _readableState: ReadableState
      readable: boolean
      readableHighWaterMark: number
      readableBuffer: Array
      readableFlowing
      readableLength
      readtableObjectMode
      readableEncoding
      destroyed
      readableEnded
      pipesCount
      paused

      constructor(options)
      destroy()
      _undestroy()

      unshift(chunk: string | Buffer | Uint8Array | null, encoding: string): boolean
      isPaused(): boolean
      setEncoding(enc: string)
      read(n: number)
      {abstract} _read(n: number)
      pipe(dest, pipeOpts)
      unpipe(dest: Writable)
      on(event, fn)
      addListener(event, fn)
      removeListener(event, fn)
      off(event, fn)
      removeAllListeners(ev)
      resume()
      pause()
      [Symbol.asyncIterator]()
      {static} from(iterable, opts)

      #push(chunk: string | Buffer | Uint8Array | null, encoding?: string): boolean
      #_construct(callback)
      #_read(n: number)
      #_destory(err, callback)
    }

    Readable *--> ReadableState
    Readable ..> Writable

    class WritableState {
      objectMode: boolean
      highWaterMark: number
      finalCalled: boolean
      needDrain: boolean
      ending: boolean
      ended: boolean
      finished: boolean
      destroyed: boolean
      decodeStrings: boolean
      defaultEncoding: boolean
      length: number
      writing: boolean
      sync: boolean
      bufferProcessing: boolean
      writecb: null
      writelen: number
      afterWriteTickInfo: null
      pendingcb: number
      constructed: boolean
      prefinished: boolean
      errorEmitted: boolean
      emitClose: boolean
      autoDestroy: boolean
      errored: null
      closed: boolean
      closeEmitted: boolean
      [kOnFinished]: Array
      buffered?
      bufferedIndex?
      bufferedRequestCount

      allBuffers: boolean
      allNoop: boolean

      onwrite()
      getBuffer()
    }

    class Writable extends Stream {
      -_writableState: WritableState
      +destroyed: boolean
      +writable: boolean
      +{readonly}writableFinished: boolean
      +{readonly}writableObjectMode: boolean
      +{readonly}writableBuffer: ret of WritableState.getBuffer
      +{readonly}writableEnded: boolean
      +{readonly}writableNeedDrain: boolean
      +{readonly}writableHighWaterMark: number
      +{readonly}writableCorked: number
      +{readonly}writableLength: number

      -{optional}_destroy()
      -{optional}_construct()
      +[Symbol.hasInstance](object)
      +pipe()
      +write(chunk, encoding?, callback?): boolean
      -_write(chunk, enconding?, cb?)
      +{abstract}_writev(chunks: Array, cb?)
      +end(chunk?, encoding?, callback?): Writable
      +cork()
      +uncork()
      +setDefaultEncoding(enconding): Writable
      +destroy(err, cb): Writable
      -_undestroy()
      -_destroy(err, cb)
    }

    Writable *--> WritableState
    note left of Writable::pipe
      it just throw a error if you attempts to call it
    endnote

    class Duplex extends Readable, Writable {
      +destoryed: boolean
    }

    note left of Duplex::destoryed
      true, iff. both Readable side and WritableState are destoryed.
    endnote

    class Transform extends Duplex {
      [kCallBack]
      final(callback) 

      +{abstract}_flush(cb: (err, data) => void)
      +{abstract}_transform(chunk, enconding, cb)
      -_write(chunk, encoding, callback)
      -_read()
    }

    class PassThrough extends Transform {
      _transform(chunk, enconding, cb)
    }

    note left of PassThrough
      a naive implementation of Transform which simply passes input to 
      output
    endnote
  }
}

@enduml
