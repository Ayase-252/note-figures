@startuml
set namespaceSeparator ::

namespace v8 {
  class Local<T> {

  }

  class FunctionTemplate {
    +Local<ObjectTemplate> InstanceTemplate();
  }

  class ObjectTemplate extends Template {

  }

  class Template {
    +void Set (Local<Name> name, Local<Data> value, PropertyAttribute attributes=None)
    +void Set (Isolate *isolate, const char *name, Local<Data> value)
  }

  FunctionTemplate ..> ObjectTemplate
}

namespace node {
  class MemoryRetainer {}
  class Environment extends MemoryRetainer {
    +size_t SelfSize() const
    +bool isRootNode() const
    +MemoryInfo(MemoryTracker* tracker) const

    +{static} Environment* GetCurrent(v8::Isolate* isolate)
    +{static} Environment* GetCurrent(v8::Local<v8::Context> context)
    +{static} Environment* GetCurrent(const v8::FunctionCallbackInfo<v8::Value>& info)
    +{static} Environment* GetCurrent<T>(const v8::PropertyCallbackInfo<T>& info)

    +v8::Local<v8::FunctionTemplate> NewFunctionTemplate(v8::FunctionCallback callback, v8::Local<v8::Signature> signature = v8::Local<v8::Signature>(), v8::ConstructorBehavior behavior = v8::ConstructorBehavior::kAllow, v8::SideEffectType side_effect = v8::SideEffectType::kHasSideEffect)
    +v8::Isolate* isolate() const

    +void SetProtoMethod(v8::Local<v8::FunctionTemplate> that, const char* name, v8::FunctionCallback callback)
    +void SetConstructorFunction(v8::Local<v8::Object> that, const char* name, v8::Local<v8::FunctionTemplate> tmpl)
    +void SetConstructorFunction(v8::Local<v8::Object> that, v8::Local<v8::String> name, v8::Local<v8::FunctionTemplate> tmpl)

    uv_loop_t* event_loop() const
  }

  Environment ..> v8::Local
  Environment ..> v8::FunctionTemplate
  Environment ..> v8::Isolate
}

@enduml
