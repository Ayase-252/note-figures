@startuml deps/libuv/uv_loop_t

!include internal.puml
!include uv_timer_t.puml

namespace libuv <<ExternalCModule>> {
  class timer_heap<<(S,red) struct>> {
    void* min         
    unsigned int nelts
  }
  class UV_LOOP_PRIVATE_FIELDS<<(M,green) Macro>> {
    unsigned long flags;                                                        
    int backend_fd;                                                             
    void* pending_queue[2];      
    void* watcher_queue[2];      
    uv__io_t** watchers;         
    unsigned int nwatchers;      
    unsigned int nfds;           
    void* wq[2];                 
    uv_mutex_t wq_mutex;         
    uv_async_t wq_async;         
    uv_rwlock_t cloexec_lock;    
    uv_handle_t* closing_handles;
    void* process_handles[2];    
    void* prepare_handles[2];    
    void* check_handles[2];      
    void* idle_handles[2];       
    void* async_handles[2];      
    void (*async_unused)(void);  
    uv__io_t async_io_watcher;   
    int async_wfd;               
    timer_heap timer_heap;                
    uint64_t timer_counter;      
    uint64_t time;               
    int signal_pipefd[2];        
    uv__io_t signal_io_watcher;  
    uv_signal_t child_watcher;   
    int emfile_fd;               
  }

  UV_LOOP_PRIVATE_FIELDS --> timer_heap

  class active_reqs<<(U,white) union>> {
    void* usused
    unsigned int count
  }

  class uv__loop_metrics_t<<(S,red) struct>> {
    uint64_t provider_entry_time
    uint64_t provider_idle_time
    uv_mutex_t lock
  }

  class uv__loop_internal_fields_t<<(S,red) struct>>{
    unsigned int flags
    uv__loop_metrics_t loop_metrics
  }

  uv__loop_internal_fields_t --> uv__loop_metrics_t

  enum uv_run_mode {
    UV_RUN_DEFAULT
    UV_RUN_ONCE
    UV_RUN_NOWAIT
  }

  class uv_loop_t<<(S,red) struct>> {
    void* data
    unsigned int active_handles
    void* handle_queue[2]
    active_reqs active_reqs
    void* internal_fields
    unsigned int stop_flag

    UV_LOOP_PRIVATE_FIELDS

    int uv_loop_init(uv_loop_t* loop)
    int uv_run(uv_loop_t* loop, uv_run_mode mode)
    int uv_loop_configure(uv_loop_t* loop, uv_loop_option option, ...)
    uv_loop_t* uv_default_loop(void)
    --internal--
    uv__update_time(uv_loop_t* loop)
    void uv__run_timers(uv_loop_t* loop)
    int uv_backend_timeout(const uv_loop_t* loop)
    int uv__next_timeout(const uv_loop_t* loop)
    void uv__io_poll(uv_loop_t* loop, int timeout)
  }

  uv_loop_t --> active_reqs
  uv_loop_t --> UV_LOOP_PRIVATE_FIELDS
  uv_loop_t --> uv__loop_internal_fields_t
  uv_loop_t --> internal
  uv_loop_t ..> uv_run_mode
  uv_loop_t --> uv_timer_t
}
@enduml
