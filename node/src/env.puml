@startuml env

!include memory_tracker.puml
!include async_wrap.puml

namespace node {
  class Environment {
    -AsyncHooks async_hooks_
    +size_t SelfSize() const
    +bool isRootNode() const
    +MemoryInfo(MemoryTracker* tracker) const

    +{static} Environment* GetCurrent(v8::Isolate* isolate)
    +{static} Environment* GetCurrent(v8::Local<v8::Context> context)
    +{static} Environment* GetCurrent(const v8::FunctionCallbackInfo<v8::Value>& info)
    +{static} Environment* GetCurrent<T>(const v8::PropertyCallbackInfo<T>& info)

    +v8::Local<v8::FunctionTemplate> NewFunctionTemplate(v8::FunctionCallback callback, v8::Local<v8::Signature> signature = v8::Local<v8::Signature>(), v8::ConstructorBehavior behavior = v8::ConstructorBehavior::kAllow, v8::SideEffectType side_effect = v8::SideEffectType::kHasSideEffect)
    +v8::Isolate* isolate() const

    +void SetProtoMethod(v8::Local<v8::FunctionTemplate> that, const char* name, v8::FunctionCallback callback)
    +void SetConstructorFunction(v8::Local<v8::Object> that, const char* name, v8::Local<v8::FunctionTemplate> tmpl)
    +void SetConstructorFunction(v8::Local<v8::Object> that, v8::Local<v8::String> name, v8::Local<v8::FunctionTemplate> tmpl)

    +uv_loop_t* event_loop() const
    +AsyncHooks* async_hooks()
  }

  Environment --> AsyncHooks.AsyncHooks

  namespace AsyncHooks {
    class DefaultTriggerAsyncIdScope {
      -AsyncHooks* async_hooks_
      -double old_default_trigger_async_id_ 
      +explicit DefaultTriggerAsyncIdScope(Environment* env, double init_trigger_async_id);
      +explicit DefaultTriggerAsyncIdScope(AsyncWrap* async_wrap);
    }

    DefaultTriggerAsyncIdScope ..> node.AsyncWrap

    DefaultTriggerAsyncIdScope --> AsyncHooks
    class AsyncHooks extends node.MemoryRetainer {
    }
  }

}
@enduml
