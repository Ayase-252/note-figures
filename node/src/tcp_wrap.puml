@startuml tcp_wrap

!include connection_wrap.puml
!include req_wrap.puml
!include handle_wrap.puml
!include stream_wrap.puml
!include base_object.puml
!include env.puml
!include deps/v8/FunctionCallbackInfo.puml
!include deps/libuv/uv_tcp_t.puml

namespace node {
  class ConnectWrap extends ReqWrap {
    +ConnectWrap(Environment* env, v8::Local<v8::Object> req_wrap_obj, AsyncWrap::ProviderType provider)
  }

  enum SocketType {
    SOCKET
    SERVER
  }

  class TCPWrap extends ConnectionWrap {
    +{static} void Initialize(Local<Object> target, Local<Value> unused, Local<Context> context, void* priv)
    -{static} TCPWrap(Environment* env, Local<Object> object, ProviderType provider)
    -{static} void New(const FunctionCallbackInfo<Value>& args)
    -{static} void Bind(const FunctionCallbackInfo<Value>& args)
    -{static} void Bind6(const FunctionCallbackInfo<Value>& args)
    -{static} void Bind<T>(const FunctionCallbackInfo<Value>& args, int family, std::function<int(const char* ip_address, int port, T* addr)> uv_ip_addr) 
    -{static} void Listen(const FunctionCallbackInfo<Value>& args)
    -{static} void Connect(const FunctionCallbackInfo<Value>& args)
    -{static} void Connect6(const FunctionCallbackInfo<Value>& args)
    -{static} void Connect(const FunctionCallbackInfo<Value>& args, std::function<int(const char* ip_address, T* addr)> uv_ip_addr)
  }

  TCPWrap ..> Environment
  TCPWrap ..> StreamBase
  TCPWrap ..> LibuvStreamWrap
  TCPWrap ..> SocketType
  TCPWrap ..> ProviderType
  TCPWrap ..> libuv.uv_tcp_t
  TCPWrap ..> v8.FunctionCallbackInfo
  TCPWrap ..> ConnectWrap
  TCPWrap ..> AsyncHooks.DefaultTriggerAsyncIdScope
}

@enduml
